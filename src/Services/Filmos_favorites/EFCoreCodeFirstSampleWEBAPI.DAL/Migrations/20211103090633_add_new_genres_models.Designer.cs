// <auto-generated />
using EFCoreCodeFirstSampleWEBAPI.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace EFCoreCodeFirstSampleWEBAPI.Migrations
{
    [DbContext(typeof(MyAppContext))]
    [Migration("20211103090633_add_new_genres_models")]
    partial class add_new_genres_models
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Description");
                });

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.Films", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FKDescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("NameFilm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseData")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FKDescriptionId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.FilmsGenres", b =>
                {
                    b.Property<int>("IdFilms")
                        .HasColumnType("int");

                    b.Property<int>("IdGenres")
                        .HasColumnType("int");

                    b.HasKey("IdFilms", "IdGenres");

                    b.HasIndex("IdGenres");

                    b.ToTable("FilmsGenres");
                });

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.FilmsUsers", b =>
                {
                    b.Property<int>("IdFilms")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("IdFilms", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("FilmsUsers");
                });

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.Genres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.Films", b =>
                {
                    b.HasOne("EFCoreCodeFirstSampleWEBAPI.Models.Description", "Description")
                        .WithMany()
                        .HasForeignKey("FKDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Description");
                });

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.FilmsGenres", b =>
                {
                    b.HasOne("EFCoreCodeFirstSampleWEBAPI.Models.Films", "Films")
                        .WithMany("FilmsGenres")
                        .HasForeignKey("IdFilms")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreCodeFirstSampleWEBAPI.Models.Genres", "Genres")
                        .WithMany("FilmsGenres")
                        .HasForeignKey("IdGenres")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Films");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.FilmsUsers", b =>
                {
                    b.HasOne("EFCoreCodeFirstSampleWEBAPI.Models.Films", "Films")
                        .WithMany("FilmsUsers")
                        .HasForeignKey("IdFilms")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreCodeFirstSampleWEBAPI.Models.User", "User")
                        .WithMany("FilmsUsers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Films");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.Films", b =>
                {
                    b.Navigation("FilmsGenres");

                    b.Navigation("FilmsUsers");
                });

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.Genres", b =>
                {
                    b.Navigation("FilmsGenres");
                });

            modelBuilder.Entity("EFCoreCodeFirstSampleWEBAPI.Models.User", b =>
                {
                    b.Navigation("FilmsUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
